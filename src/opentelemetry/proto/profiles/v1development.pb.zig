// Code generated by protoc-gen-zig
///! package opentelemetry.proto.profiles.v1development
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;
/// import package opentelemetry.proto.common.v1
const opentelemetry_proto_common_v1 = @import("../common/v1.pb.zig");
/// import package opentelemetry.proto.resource.v1
const opentelemetry_proto_resource_v1 = @import("../resource/v1.pb.zig");

pub const AggregationTemporality = enum(i32) {
    AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
    AGGREGATION_TEMPORALITY_DELTA = 1,
    AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
    _,
};

pub const ProfilesData = struct {
    resource_profiles: ArrayList(ResourceProfiles),

    pub const _desc_table = .{
        .resource_profiles = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ResourceProfiles = struct {
    resource: ?opentelemetry_proto_resource_v1.Resource = null,
    scope_profiles: ArrayList(ScopeProfiles),
    schema_url: ManagedString = .Empty,

    pub const _desc_table = .{
        .resource = fd(1, .{ .SubMessage = {} }),
        .scope_profiles = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .schema_url = fd(3, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ScopeProfiles = struct {
    scope: ?opentelemetry_proto_common_v1.InstrumentationScope = null,
    profiles: ArrayList(Profile),
    schema_url: ManagedString = .Empty,

    pub const _desc_table = .{
        .scope = fd(1, .{ .SubMessage = {} }),
        .profiles = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .schema_url = fd(3, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Profile = struct {
    sample_type: ArrayList(ValueType),
    sample: ArrayList(Sample),
    mapping_table: ArrayList(Mapping),
    location_table: ArrayList(Location),
    location_indices: ArrayList(i32),
    function_table: ArrayList(Function),
    attribute_table: ArrayList(opentelemetry_proto_common_v1.KeyValue),
    attribute_units: ArrayList(AttributeUnit),
    link_table: ArrayList(Link),
    string_table: ArrayList(ManagedString),
    time_nanos: i64 = 0,
    duration_nanos: i64 = 0,
    period_type: ?ValueType = null,
    period: i64 = 0,
    comment_strindices: ArrayList(i32),
    default_sample_type_strindex: i32 = 0,
    profile_id: ManagedString = .Empty,
    dropped_attributes_count: u32 = 0,
    original_payload_format: ManagedString = .Empty,
    original_payload: ManagedString = .Empty,
    attribute_indices: ArrayList(i32),

    pub const _desc_table = .{
        .sample_type = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .sample = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .mapping_table = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .location_table = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .location_indices = fd(5, .{ .PackedList = .{ .Varint = .Simple } }),
        .function_table = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .attribute_table = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .attribute_units = fd(8, .{ .List = .{ .SubMessage = {} } }),
        .link_table = fd(9, .{ .List = .{ .SubMessage = {} } }),
        .string_table = fd(10, .{ .List = .String }),
        .time_nanos = fd(11, .{ .Varint = .Simple }),
        .duration_nanos = fd(12, .{ .Varint = .Simple }),
        .period_type = fd(13, .{ .SubMessage = {} }),
        .period = fd(14, .{ .Varint = .Simple }),
        .comment_strindices = fd(15, .{ .PackedList = .{ .Varint = .Simple } }),
        .default_sample_type_strindex = fd(16, .{ .Varint = .Simple }),
        .profile_id = fd(17, .Bytes),
        .dropped_attributes_count = fd(19, .{ .Varint = .Simple }),
        .original_payload_format = fd(20, .String),
        .original_payload = fd(21, .Bytes),
        .attribute_indices = fd(22, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AttributeUnit = struct {
    attribute_key_strindex: i32 = 0,
    unit_strindex: i32 = 0,

    pub const _desc_table = .{
        .attribute_key_strindex = fd(1, .{ .Varint = .Simple }),
        .unit_strindex = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Link = struct {
    trace_id: ManagedString = .Empty,
    span_id: ManagedString = .Empty,

    pub const _desc_table = .{
        .trace_id = fd(1, .Bytes),
        .span_id = fd(2, .Bytes),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ValueType = struct {
    type_strindex: i32 = 0,
    unit_strindex: i32 = 0,
    aggregation_temporality: AggregationTemporality = @enumFromInt(0),

    pub const _desc_table = .{
        .type_strindex = fd(1, .{ .Varint = .Simple }),
        .unit_strindex = fd(2, .{ .Varint = .Simple }),
        .aggregation_temporality = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Sample = struct {
    locations_start_index: i32 = 0,
    locations_length: i32 = 0,
    value: ArrayList(i64),
    attribute_indices: ArrayList(i32),
    link_index: ?i32 = null,
    timestamps_unix_nano: ArrayList(u64),

    pub const _desc_table = .{
        .locations_start_index = fd(1, .{ .Varint = .Simple }),
        .locations_length = fd(2, .{ .Varint = .Simple }),
        .value = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
        .attribute_indices = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        .link_index = fd(5, .{ .Varint = .Simple }),
        .timestamps_unix_nano = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Mapping = struct {
    memory_start: u64 = 0,
    memory_limit: u64 = 0,
    file_offset: u64 = 0,
    filename_strindex: i32 = 0,
    attribute_indices: ArrayList(i32),
    has_functions: bool = false,
    has_filenames: bool = false,
    has_line_numbers: bool = false,
    has_inline_frames: bool = false,

    pub const _desc_table = .{
        .memory_start = fd(1, .{ .Varint = .Simple }),
        .memory_limit = fd(2, .{ .Varint = .Simple }),
        .file_offset = fd(3, .{ .Varint = .Simple }),
        .filename_strindex = fd(4, .{ .Varint = .Simple }),
        .attribute_indices = fd(5, .{ .PackedList = .{ .Varint = .Simple } }),
        .has_functions = fd(6, .{ .Varint = .Simple }),
        .has_filenames = fd(7, .{ .Varint = .Simple }),
        .has_line_numbers = fd(8, .{ .Varint = .Simple }),
        .has_inline_frames = fd(9, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Location = struct {
    mapping_index: ?i32 = null,
    address: u64 = 0,
    line: ArrayList(Line),
    is_folded: bool = false,
    attribute_indices: ArrayList(i32),

    pub const _desc_table = .{
        .mapping_index = fd(1, .{ .Varint = .Simple }),
        .address = fd(2, .{ .Varint = .Simple }),
        .line = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .is_folded = fd(4, .{ .Varint = .Simple }),
        .attribute_indices = fd(5, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Line = struct {
    function_index: i32 = 0,
    line: i64 = 0,
    column: i64 = 0,

    pub const _desc_table = .{
        .function_index = fd(1, .{ .Varint = .Simple }),
        .line = fd(2, .{ .Varint = .Simple }),
        .column = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Function = struct {
    name_strindex: i32 = 0,
    system_name_strindex: i32 = 0,
    filename_strindex: i32 = 0,
    start_line: i64 = 0,

    pub const _desc_table = .{
        .name_strindex = fd(1, .{ .Varint = .Simple }),
        .system_name_strindex = fd(2, .{ .Varint = .Simple }),
        .filename_strindex = fd(3, .{ .Varint = .Simple }),
        .start_line = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
